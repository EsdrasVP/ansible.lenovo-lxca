# Task file for lenovo.lxca-compliance role
# This task will read custom fact and validate them against compliance rule

- name: Reload the facts
  setup: ~
  tags: validate_server_facts

- include: validate_compliance_rules.yml
  with_items: "{{ comp_rules_dict['Servers'] }}"
  tags: validate_server_facts

#- name: Printing Ansible Facts
#  debug:
#    var: ansible_local
#  tags:
#    validate_server_facts
#
#- name: Printing Compliance Rules
#  debug:
#    var: comp_rules_dict
#  tags:
#    validate_server_facts

#- name: validate facts
#  pylxca_module:
#    rules_dict: "{{ comp_rules_dict }}"
#    data_dict: "{{ ansible_local }}"
#    command_options: validate_server_facts
#  tags:
#    validate_server_facts





#- name: Evaluate Failure
#  set_fact:
#    comp_result: False
#  when:  ( ansible_local[server_uuid][property]|string != ref_value )
#  tags:
#    validate_server_facts
#
#- name: Evaluate Success
#  set_fact:
#    comp_result: True
#  when:  ( ansible_local[server_uuid][property]|string == ref_value )
#  tags:
#    validate_server_facts
#
#- name: debug data
#  debug:
#    var: comp_result
#  tags:
#    validate_server_facts

#- name: Update result in fact file
#  template: src=/etc/ansible/facts.d/{{server_uuid}}.fact dest=/etc/ansible/facts.d/{{server_uuid}}.fact
#  with_items: comp_results
#  tags:
#    validate_server_facts

#- name: Validate Fact
#ansible_local[server_uuid ][property ] ==
#  set_fact:
#    node_list: "{{ node_list|default([]) | union([{ 'uuid': item.uuid, 'machineType': item.machineType }]) }}"
#  when:
#    - item.uuid == "{{ server_uuid}}"
#  with_items: "{{ rslt.result.nodeList}}"
#  tags:
#    gather_server_facts
