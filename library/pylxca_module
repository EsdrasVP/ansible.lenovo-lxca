#!/usr/bin/python

#---- Documentation Start ----------------------------------------------------#
DOCUMENTATION = '''
---
version_added: "1.0"
author: Mahesh Kalge
module: pylxca_module
short_description: custom module for pylxca utility
description:
  - This module returns/displays a inventory details of chassis, cmms, nodes,
    switches, fans, powersupplies, fanmuxes etc
options:
  login_user:
    description:
      The username for use in HTTP basic authentication.
  login_password:
    description:
      The password for use in HTTP basic authentication.
  command_options:
    description:
      options are connect, chassis, cmms, switches, fans, fanmuxes
  auth_url:
    description:
      lxca https full web address
'''

EXAMPLES = '''
# get cmms info
- pylxca_module: command_options=connect login_user=USERID login_password=CME44ibm auth_url=https://10.243.15.168
'''

import os
import json
import logging
import logging.handlers
from pylxca.pylxca_cmd.lxca_pyshell import *

ip_map = dict()

def find_conn_obj ( kwargs):
    if ip_map.get(kwargs.get('auth_url')) is not None:
       return ip_map.get(kwargs.get('auth_url'))
    return None
  
def _get_connect_lxca ( module, kwargs):
    #global _conn_lxca
    _conn_lxca = None
    
    kargs = {
                'url': kwargs.get('auth_url'),
                'user': kwargs.get('login_user'),
                'pw': kwargs.get('login_password'),
                'ip': kwargs.get('discovery_ip'),
                'noverify':'True'
        }
    try:
        _conn_lxca = find_conn_obj( kwargs ) 
        if _conn_lxca is None: 
            _conn_lxca = connect(kwargs.get('auth_url'),kwargs.get('login_user'),kwargs.get('login_password'),"True")
        ip_map.update({kwargs.get('auth_url'): _conn_lxca})
#        ip_map = { kwargs.get('auth_url'): _conn_lxca }
    except Exception:
        module.fail_json(msg = "Error authenticating with provided credentials: %s" % kwargs.get('auth_url'))
    return _conn_lxca

def _get_chassis_inventory( module, kwargs):
    result = None
    try:
       result = chassis(_get_connect_lxca(module,kwargs))
    except Exception as e:
       module.fail_json(msg = "Error getting chassis inventory" + str(e))
    return result

def _get_cmms_inventory(module, kwargs):
    result = None
    try:
        result =  cmms(_get_connect_lxca(module,kwargs), kwargs.get('uuid'))
    except Exception as e:
        module.fail_json(msg = "Error getting cmms inventory" + str(e))
    return result

def _get_configpatterns(module, kwargs):
    result = None
    try:
        result =  configpatterns(_get_connect_lxca(module,kwargs), kwargs.get('id'))
    except Exception as e:
        module.fail_json(msg = "Error getting configpatterns" + str(e))
    return result

def _get_configprofiles(module, kwargs):
    result = None
    try:
        result =  configprofiles(_get_connect_lxca(module,kwargs), kwargs.get('id'))
    except Exception as e:
        module.fail_json(msg = "Error getting configprofiles" + str(e))
    return result

def _get_configtargets(module, kwargs):
    result = None
    try:
        result =  configtargets(_get_connect_lxca(module,kwargs), kwargs.get('uuid'))
    except Exception as e:
        module.fail_json(msg = "Error getting configtargets" + str(e))
    return result


def _get_discover(module, kwargs):
    result = None
    try:
        result =  discover(_get_connect_lxca(module,kwargs),kwargs.get('discovery_ip'))
    except Exception as e:
        module.fail_json(msg = "Error discovery " + str(e))
    return result

def _get_fans(module, kwargs):
    result = None
    try:
        result =  fans(_get_connect_lxca(module,kwargs), kwargs.get('uuid'))
    except Exception as e:
        module.fail_json(msg = "Error getting fans inventory " + str(e))
    return result

def _get_fanmuxes(module, kwargs):
    result = None
    try:
        result =  fanmuxes(_get_connect_lxca(module,kwargs), kwargs.get('uuid'))
    except Exception as e:
        module.fail_json(msg = "Error getting fanmuxes inventory " + str(e))
    return result

def _get_ffdc(module, kwargs):
    result = None
    try:
        result =  ffdc(_get_connect_lxca(module,kwargs), kwargs.get('uuid'))
    except Exception as e:
        module.fail_json(msg = "Error getting ffdc inventory " + str(e))
    return result

def _get_jobs(module, kwargs):
    result = None
    try:
        result =  jobs(_get_connect_lxca(module,kwargs), kwargs.get('id'))
    except Exception as e:
        module.fail_json(msg = "Error getting jobs inventory " + str(e))
    return result

# TODO filter
def _get_lxcalog(module, kwargs):
    result = None
    try:
        result = lxcalog(_get_connect_lxca(module,kwargs))
    except Exception as e:
        module.fail_json(msg = "Error getting lxcalog " + str(e))
    return result

def _manage_bare_metal(module, kwargs):
    result = None
    manage_kargs = {
                'ip': kwargs.get('discovery_ip'),
                'user': kwargs.get('manage_user'),
                'pw': kwargs.get('manage_password'),
                'rpw': kwargs.get('recovery_password'), 
                'mp': kwargs.get('manage_param'),
                'type': kwargs.get('manage_type'),
                'uuid': kwargs.get('uuid') 
        }

    try:
       result = manage(_get_connect_lxca(module,kwargs),kwargs.get('discovery_ip'),kwargs.get('manage_user'),kwargs.get('manage_password'),kwargs.get('recovery_password'),kwargs.get('manage_param'),kwargs.get('manage_type'),kwargs.get('uuid'), kwargs.get('discover_jobid'), kwargs.get('force'))
    except Exception as e:
        module.fail_json(msg = " Fail to manage" + str(e))
    return result

def _manage_metal_percent(module, kwargs):
    result = None
    try:
       result = manage(_get_connect_lxca(module,kwargs), None, None, None, None, None, None, None, kwargs.get('discover_jobid'))
    except Exception as e:
        module.fail_json(msg = "Error getting info abt jobid" + str(e))
    return result

def _get_manifests(module, kwargs):
    result = None
    try:
        dict = {'id':kwargs.get('sol_id'),'file':kwargs.get('manifest_path')}
        conn = _get_connect_lxca(module,kwargs)
        result =  manifests(conn,dict)
    except Exception as e:
        module.fail_json(msg = "Error getting manifest " + str(e))
    return result

#TODO chassis , status
def _get_nodes(module, kwargs):
    result = None
    try:
        result =  nodes(_get_connect_lxca(module,kwargs), kwargs.get('uuid'))
    except Exception as e:
        module.fail_json(msg = "Error getting nodes inventory " + str(e))
    return result

def _get_powersupplies(module, kwargs):
    result = None
    try:
        result =  powersupplies(_get_connect_lxca(module,kwargs), kwargs.get('uuid'))
    except Exception as e:
        module.fail_json(msg = "Error getting powersupplies inventory " + str(e))
    return result

#TODO type, status
def _get_scalablesystem(module, kwargs):
    result = None
    try:
        result =  scalablesystem(_get_connect_lxca(module,kwargs), kwargs.get('id'))
    except Exception as e:
        module.fail_json(msg = "Error getting scalablesystem inventory " + str(e))
    return result

# TODO chassis, ports, action
def _get_switches_inventory( module, kwargs):
    result = None
    try:
        result = switches(_get_connect_lxca(module,kwargs), kwargs.get('uuid'))
    except Exception as e:
        module.fail_json(msg="Error getting switches " + str(e))
    return result

def _get_tasks(module, kwargs):
    result = None
    tasks_dict = {}
    jobUID = kwargs.get("id")
    action = kwargs.get("action")
    if action in ['cancel', 'delete']:
        tasks_dict['jobUID'] = jobUID
        tasks_dict['action'] = action
    elif action in ['update']:
        tasks_dict['action'] = action
        updateList = kwargs.get("update_list")
        tasks_dict['updateList'] = updateList
    else:
        tasks_dict['jobUID'] = jobUID
    try:
        result = tasks(_get_connect_lxca(module,kwargs),tasks_dict)
    except Exception as e:
        module.fail_json(msg = "Error getting tasks " + str(e))
    return result

def _get_updaterepo_info(module, kwargs):
    result = None
    try:
        repo_key = kwargs.get('repo_key')
        result =  updaterepo(_get_connect_lxca(module,kwargs), repo_key)
    except Exception:
        module.fail_json(msg = "Error retriving firmware info.")
    return result

def _update_firmware(module, kwargs):
    result = None
    try:
        result =  updatecomp(_get_connect_lxca(module,kwargs),mode=kwargs.get('update_mode'),action=kwargs.get('update_action'),server=kwargs.get('update_server'))
#        result =  updatecomp(_get_connect_lxca(module,kwargs),"immediate","apply","A155A9581FB711E397C2000AF72569C4,lnvgy_fw_imm2_tcoo18q-3.20_anyos_noarch,IMM2")
    except Exception:
        module.fail_json(msg = "Error updating firmware ")
    return result

# TODO policy, info
def _get_updatepolicy(module, kwargs):
    result = None
    try:
        result =  updatepolicy(_get_connect_lxca(module,kwargs))
    except Exception:
        module.fail_json(msg = "Error getting updatepolicy ")
    return result

def _get_users(module, kwargs):
    result = None
    try:
        result =  resourcegroups(_get_connect_lxca(module,kwargs), kwargs.get('name'))
    except Exception:
        module.fail_json(msg = "Error getting users ")
    return result

def _gather_server_facts(module, kwargs):
    kwargs['uuid'] = kwargs.get('fact_dict')['server_uuid']

    rslt = _get_nodes(module, module.params)

    if not rslt:
        module.exit_json(changed=False, msg="Fail to retrieve information", result=rslt)
    else:
        module.exit_json(changed=True, msg="Success retrieving information", ansible_facts=rslt)

def _validate_server_facts(module, kwargs):
    # kwargs['uuid'] = kwargs.get('fact_dict')['server_uuid']
    #
    # rslt = _get_nodes(module, module.params)
    #
    # if not rslt:
    #     module.exit_json(changed=False, msg="Fail to retrieve information", result=rslt)
    # else:
    #     module.exit_json(changed=True, msg="Success retrieving information", ansible_facts=rslt)
    module.exit_json(changed=True, msg="Success retrieving information", result=True)

def _create_resourcegroups(module, kwargs):
    result = None
    try:
        result =  resourcegroups(_get_connect_lxca(module,kwargs), kwargs.get('group_name'))
    except Exception:
        module.fail_json(msg = "Error getting users ")
    return result

def _add_resourcegroup_member(module, kwargs):
    result = None
    try:
        result =  resourcegroups(_get_connect_lxca(module,kwargs), kwargs.get('group_name'))
    except Exception:
        module.fail_json(msg = "Error getting users ")
    return result

func_dict = {
                'connect': _get_connect_lxca,
                'chassis': _get_chassis_inventory,
                'cmms': _get_cmms_inventory,
                'configpatterns': _get_configpatterns,
                'configprofiles': _get_configprofiles,
                'configtargets': _get_configtargets,
                'discover': _get_discover,
                'fans': _get_fans,
                'fanmuxes': _get_fanmuxes,
                'ffdc': _get_ffdc,
                'jobs': _get_jobs,
                'lxcalog': _get_lxcalog,
                'manage': _manage_bare_metal,
                'manage_metal_percent': _manage_metal_percent,
                'manifests': _get_manifests,
                'nodes': _get_nodes,
                'powersupplies': _get_powersupplies,
                'scalablesystem': _get_scalablesystem,
                'switches': _get_switches_inventory,
                'tasks': _get_tasks,
                'updaterepo': _get_updaterepo_info,
                'updatecomp': _update_firmware,
                'updatepolicy': _get_updatepolicy,
                'users': _get_users,
                'gather_server_facts': _gather_server_facts,
                'validate_server_facts': _validate_server_facts,
                'create_resourcegroups':_create_resourcegroups,
                'add_resourcegroup_member':_add_resourcegroup_member
}


# ===========================================
# Main
#

def main():
    module = AnsibleModule(
        argument_spec=dict(
            login_user      = dict(default=None, required=False),
            login_password  = dict(default=None, required=False),
            connobject      = dict(default=None),
            #command_options = dict(choices=['connect', 'chassis', 'cmms', 'configpatterns', 'disconnect', 'discover', 'fans', 'fanmuxes', 'ffdc', 'jobs', 'lxcalog', 'manage', 'manifests', 'nodes', 'powersupplies', 'scalablesystem', 'switches', 'tasks', 'unmanage', 'updaterepo', 'updatecomp', 'updatepolicy', 'users']),
            command_options = dict( choises=list(func_dict) ),
            action          = dict(default=None),
            auth_url        = dict(default=None),
            uuid            = dict(default=None),
            id              = dict(default=None),
            discovery_ip    = dict(default=None),
            discover_jobid  = dict(default=None),
            manage_user     = dict(default=None, required=False),
            manage_password = dict(default=None, required=False),
            manage_param    = dict(default=None),
            manage_type     = dict(default=None),
            force           = dict(default=None),
            percentage      = dict(default=None),
            state           = dict(default=None),
            sol_id          = dict(default=None),
            manifest_path   = dict(default=None),
            group_name      = dict(default=None),
            group_desc      = dict(default=None),
            group_type      = dict(default=None),
            solutionVPD     = dict(default=None, type=('dict')),
            group_members   = dict(default=None, type=('list')),
            group_criteria  = dict(default=None, type=('list')),
            recovery_password = dict(default=None),
            repo_key        = dict(default=None),
            update_mode     = dict(default=None),
            update_action   = dict(default=None),
            update_server   = dict(default=None),
            update_storage  = dict(default=None),
            update_switch   = dict(default=None),
            update_cmm      = dict(default=None),
            update_list     = dict(default=None,type=('list')),
            fact_dict       = dict(default=None,type=('dict'))

        ),
        check_invalid_arguments=False,
	    supports_check_mode = False,
    )
    
    conn = None
    rslt = None
    global ip_map
    
    login_password = module.params["login_password"]
    login_user = module.params["login_user"]
    conn_obj = module.params["connobject"]
    auth_url = module.params["auth_url"]

    # Argument needed for discovery
    discovery_ip = module.params["discovery_ip"]
    discover_jobid = module.params["discover_jobid"]
    command_options =  module.params['command_options']

    # Argument needed for managing machine with lxca
    manage_user = module.params["manage_user"]
    manage_password = module.params["manage_password"]
    manage_param = module.params["manage_param"]
    manage_type = module.params["manage_type"]
    uuid = module.params["uuid"]
    recovery_password = module.params["recovery_password"]

    #firmware-updates repository
    repo_key = module.params["repo_key"]

    #firmware update paramter
    update_mode = module.params["update_mode"]
    update_action = module.params["update_action"]
    update_server = module.params["update_server"]
    update_storage = module.params["update_storage"]
    update_switch  = module.params["update_switch"]
    update_cmm     = module.params["update_cmm"]

    pyshell()

    rslt = func_dict[command_options](module,module.params)
    if not rslt:
        module.exit_json(changed=False, msg="Fail to get %s result" %command_options, result=rslt)
    else:
        module.exit_json(changed=False, msg="Success %s result" %command_options, result=rslt)

# import module snippets
from ansible.module_utils.basic import *
main()


