#!/usr/bin/python

#---- Documentation Start ----------------------------------------------------#
DOCUMENTATION = '''
---
version_added: "1.0"
author: Mahesh Kalge
module: pylxca_module
short_description: custom module for pylxca utility
description:
  - This module returns/displays a inventory details of chassis, cmms, nodes,
    switches, fans, powersupplies, fanmuxes etc
options:
  login_user:
    description:
      The username for use in HTTP basic authentication.
  login_password:
    description:
      The password for use in HTTP basic authentication.
  command_options:
    description:
      options are connect, chassis, cmms, switches, fans, fanmuxes
  auth_url:
    description:
      lxca https full web address
'''

EXAMPLES = '''
# get cmms info
- pylxca_module: command_options=connect login_user=USERID login_password=CME44ibm auth_url=https://10.243.15.168
'''

import os
import json
import logging
import logging.handlers

#from pylxca import pylxca_cmd
#from pylxca.pylxca_cmd import lxca_icommands,lxca_ishell, lxca_pyshell
#from pylxca.pylxca_cmd.lxca_ishell import PYTHON_SHELL
#from pylxca.pylxca_cmd.lxca_pyshell import pyshell
#from pylxca.pylxca_cmd import lxca_icommands,lxca_ishell, lxca_pyshell
from pylxca.pylxca_cmd.lxca_pyshell import *

ip_map = dict()

def find_conn_obj ( kwargs):
    if ip_map.get(kwargs.get('auth_url')) is not None:
       return ip_map.get(kwargs.get('auth_url'))
    return None
  
def _get_connect_lxca ( module, kwargs):
    #global _conn_lxca
    _conn_lxca = None
    
    kargs = {
                'url': kwargs.get('auth_url'),
                'user': kwargs.get('login_user'),
                'pw': kwargs.get('login_password'),
                'ip': kwargs.get('discovery_ip'),
                'noverify':'True'
        }
    try:
        _conn_lxca = find_conn_obj( kwargs ) 
        if _conn_lxca is None: 
            _conn_lxca = connect(kwargs.get('auth_url'),kwargs.get('login_user'),kwargs.get('login_password'),"True")
        ip_map.update({kwargs.get('auth_url'): _conn_lxca})
#        ip_map = { kwargs.get('auth_url'): _conn_lxca }
    except Exception:
        module.fail_json(msg = "Error authenticating with provided credentials: %s" % kwargs.get('auth_url'))
    return _conn_lxca

def _get_chassis_inventory( module, kwargs):
    result = None
    try:
       result = chassis(_get_connect_lxca(module,kwargs))
    except Exception:
       module.fail_json(msg = find_conn_obj(kwargs))
    return result

def _get_switches( module, kwargs):
    result = None
    try:
       result = chassis(_get_connect_lxca(module,kwargs))
    except Exception:
       module.fail_json(msg = find_conn_obj(kwargs))
    return result

def _get_cmms_inventory(module, kwargs):
    result = None
    try:
        result =  cmms(_get_connect_lxca(module,kwargs))
    except Exception:
        module.fail_json(msg = "Error getting cmms inventory")
    return result

def _get_discover(module, kwargs):
    result = None
    try:
        result =  discover(_get_connect_lxca(module,kwargs),kwargs.get('discovery_ip'))
    except Exception:
        module.fail_json(msg = "Error discovery")
    return result

def _manage_bare_metal(module, kwargs):
    result = None
    manage_kargs = {
                'ip': kwargs.get('discovery_ip'),
                'user': kwargs.get('manage_user'),
                'pw': kwargs.get('manage_password'),
                'rpw': kwargs.get('recovery_password'), 
                'mp': kwargs.get('manage_param'),
                'type': kwargs.get('manage_type'),
                'epuuid': kwargs.get('manage_uuid') 
                
        }

    try:
       result = manage(_get_connect_lxca(module,kwargs),kwargs.get('discovery_ip'),kwargs.get('manage_user'),kwargs.get('manage_password'),kwargs.get('recovery_password'),kwargs.get('manage_param'),kwargs.get('manage_type'),kwargs.get('manage_uuid'))
    except Exception:
        module.fail_json(msg = " Fail to manage")
    return result

def _manage_metal_percent(module, kwargs):
    result = None
    try:
       result = manage(_get_connect_lxca(module,kwargs),kwargs.get(discover_jobid))
    except Exception:
        module.fail_json(msg = "Error getting info abt jobid")
    return result

def _get_updaterepo_info(module, kwargs):
    result = None
    try:
        result =  updaterepo(_get_connect_lxca(module,kwargs),kwargs.get('repo_key'))
    except Exception:
        module.fail_json(msg = "Error retriving firmware info.")
    return result


# ===========================================
# Main
#

def main():
    module = AnsibleModule(
        argument_spec=dict(
            login_user      = dict(default=None, required=False),
            login_password  = dict(default=None, required=False),
            connobject      = dict(default=None),
#            command_options = dict(default='connect',choices=['connect', 'chassis', 'cmms', 'disconnect']),
            command_options = dict(choices=['connect', 'chassis', 'cmms', 'disconnect', 'discover', 'manage', 'switches', 'updaterepo', 'updatecomp','unmanage']),
            auth_url        = dict(default=None),
            discovery_ip    = dict(default=None),
            discover_jobid  = dict(default=None),
# manage 
            manage_user     = dict(default=None, required=False),
            manage_password = dict(default=None, required=False),
            manage_param    = dict(default=None),
            manage_type     = dict(default=None),
            manage_uuid     = dict(default=None),
            recovery_password = dict(default=None),
#firmware-updates repository
            repo_key        = dict(default=None)
        ),
        check_invalid_arguments=False,
    )
    
    conn = None
    rslt = None
    global ip_map
    
    login_password = module.params["login_password"]
    login_user = module.params["login_user"]
    conn_obj = module.params["connobject"]
    auth_url = module.params["auth_url"]
# Argument needed for discovery
    discovery_ip = module.params["discovery_ip"]
    discover_jobid = module.params["discover_jobid"]
    command_options =  (module.params['command_options'] and module.params['command_options'].upper())
# Argument needed for managing machine with lxca
    manage_user = module.params["manage_user"]
    manage_password = module.params["manage_password"]
    manage_param = module.params["manage_param"]
    manage_type = module.params["manage_type"]
    manage_uuid = module.params["manage_uuid"]
    recovery_password = module.params["recovery_password"]
    repo_key = module.params["repo_key"]
    pyshell()    
   
    if module.params['command_options'] == 'connect' and login_password and login_user and auth_url is not None:
        conn = _get_connect_lxca( module, module.params)
#        conn_rslt = dict(changed=False, ansible_facts=conn)
#        rslt = _get_cmms_inventory(conn_obj)       
#        conn = connect(auth_url,login_user,login_password,"True")
        if not conn:
#            module.exit_json( **conn_rslt )
           module.exit_json( changed=False,msg="Got connection object")
        else:          
           module.exit_json( changed=False,msg="Fail getting connection object")
#            module.exit_json( **conn_rslt )

    if  module.params['command_options'] == 'chassis':
        rslt = _get_chassis_inventory(module, module.params)
        if not rslt:
           module.exit_json(changed=False, msg="Fail to get chassis result", result=rslt)
        else:
           module.exit_json(changed=False,msg="Success chassis result", result=rslt) 

    if  module.params['command_options'] == 'cmms':
        rslt = _get_cmms_inventory(module, module.params)
        if not rslt:
           module.exit_json(changed=False, msg="Fail to get cmms result", result=rslt)
        else:
           module.exit_json(changed=False,msg="Success cmms result", result=rslt)

    if  module.params['command_options'] == 'discover':
        rslt = _get_discover(module, module.params)
        if not rslt:
           module.exit_json(changed=False, msg="Fail to discovery", result=rslt)
        else:
           module.exit_json(changed=False,msg="Successful discovery", result=rslt)

    if  module.params['command_options'] == 'manage':
        rslt = _manage_bare_metal(module, module.params)
        if not rslt:
           module.exit_json(changed=False, msg="Fail to manage", result=rslt)
        else:
           module.exit_json(changed=False,msg="Manage Successful", result=rslt)

    if  module.params['command_options'] == 'switches':
        rslt = _get_switches(module, module.params)
        if not rslt:
           module.exit_json(changed=False, msg="Fail to get switches result", result=rslt)
        else:
           module.exit_json(changed=False,msg="Success switches result", result=rslt)

    if  module.params['command_options'] == 'updaterepo':
        rslt = _get_updaterepo_info(module, module.params)
        if not rslt:
           module.exit_json(changed=False, msg="Fail to retrieve firmware info", result=rslt)
        else:
           module.exit_json(changed=False,msg="Success retrieving firmware info", result=rslt)

   
# import module snippets
from ansible.module_utils.basic import *
main()


